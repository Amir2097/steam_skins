from aiogram import types, F, Router
from aiogram.types import Message, CallbackQuery
from steam_test import type_cs, cs_money_add
from aiogram.utils.markdown import hbold, hlink
import models as mod
import keyboard as kb
import asyncio
import json

router = Router()


@router.callback_query(F.data == "skins")
async def help_handler(callback_query: CallbackQuery):
    await callback_query.message.answer(
        f"üöÄ –ê–Ω–∞–ª–∏–∑ —Å–∫–∏–¥–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å–∫–∏–Ω–æ–≤ ‚Üì\n"
        f"- –Ω–µ –º–µ–Ω—å—à–µ 20 %\n"
        f"- –æ—Ç 100 —Ä—É–±–ª–µ–π –¥–æ 4000 —Ä—É–±–ª–µ–π\n"
        f"- –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ USD", reply_markup=kb.cs_sites
    )


@router.callback_query(F.data == "csmoney")
async def help_handler(callback_query: CallbackQuery):
    await callback_query.message.answer(
        f"‚Äº –í–∞–º —Å–ª–µ–¥—É–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Üì", reply_markup=kb.csmoney_gun
    )


@router.callback_query(F.data == "pistols")
async def help_handler(callback_query: CallbackQuery):
    await callback_query.message.answer('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∏—Å—Ç–æ–ª–µ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ CS.MONEY, –æ–∂–∏–¥–∞–π—Ç–µ...')
    user_id = mod.session.query(mod.User.id).filter(
        mod.User.id_tg == callback_query.from_user.id).first()[0]
    del_pistols = mod.session.query(mod.Pistols).filter(mod.Pistols.request_user_id == user_id).all()
    for pistol in del_pistols: # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π -> –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∫–∞
        mod.session.delete(pistol)
        mod.session.commit()
    cs_money_add(type_cs["–ü–∏—Å—Ç–æ–ª–µ—Ç—ã"], user_id, mod.Pistols)
    new_pistols = mod.session.query(mod.Pistols).filter(mod.Pistols.request_user_id == user_id).all()
    await callback_query.message.answer(f"–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–≤ –≤ –ë–î")
    for new_pistol in new_pistols:
        card = f'{hlink(new_pistol.full_name, new_pistol.url)}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{new_pistol.Discount}%\n' \
               f'{hbold("–¶–µ–Ω–∞ –¥–æ: ")}{new_pistol.BeforePrice} —Ä—É–±.\n' \
               f'{hbold("–¶–µ–Ω–∞ –ø–æ—Å–ª–µ: ")}{new_pistol.PriceNow} —Ä—É–±. üî•'
        await callback_query.message.answer(card)


@router.callback_query(F.data == "pistolsgun")
async def help_handler(callback_query: CallbackQuery):
    await callback_query.message.answer('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∏—Å—Ç–æ–ª–µ—Ç—ã-–ø—É–ª–µ–º–µ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ CS.MONEY, –æ–∂–∏–¥–∞–π—Ç–µ...')
    user_id = mod.session.query(mod.User.id).filter(
        mod.User.id_tg == callback_query.from_user.id).first()[0]
    cs_money_add(type_cs["–ü–∏—Å—Ç–æ–ª–µ—Ç—ã-–ø—É–ª–µ–º–µ—Ç—ã"], user_id, mod.Pistols_gun)
    await callback_query.message.answer(f"–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Å—Ç–æ–ª–µ—Ç–æ–≤-–ø—É–ª–µ–º–µ—Ç–æ–≤ –≤ –ë–î")


@router.callback_query(F.data == "rifle")
async def help_handler(callback_query: CallbackQuery):
    await callback_query.message.answer('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —à—Ç—É—Ä–º–æ–≤—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏ –Ω–∞ —Ä—ã–Ω–∫–µ CS.MONEY, –æ–∂–∏–¥–∞–π—Ç–µ...')
    user_id = mod.session.query(mod.User.id).filter(
        mod.User.id_tg == callback_query.from_user.id).first()[0]
    cs_money_add(type_cs["–®—Ç—É—Ä–º–æ–≤—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏"], user_id, mod.Rifles)
    await callback_query.message.answer(f"–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—Ç—É—Ä–º–æ–≤—ã—Ö –≤–∏–Ω—Ç–æ–≤–æ–∫ –≤ –ë–î")


@router.callback_query(F.data == "sniper")
async def help_handler(callback_query: CallbackQuery):
    await callback_query.message.answer('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏ –Ω–∞ —Ä—ã–Ω–∫–µ CS.MONEY, –æ–∂–∏–¥–∞–π—Ç–µ...')
    user_id = mod.session.query(mod.User.id).filter(
        mod.User.id_tg == callback_query.from_user.id).first()[0]
    cs_money_add(type_cs["–°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏"], user_id, mod.Snipers)
    await callback_query.message.answer(f"–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏—Ö –≤–∏–Ω—Ç–æ–≤–æ–∫ –≤ –ë–î")


@router.callback_query(F.data == "shotgun")
async def help_handler(callback_query: CallbackQuery):
    await callback_query.message.answer('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥—Ä–æ–±–æ–≤–∏–∫–∏ –Ω–∞ —Ä—ã–Ω–∫–µ CS.MONEY, –æ–∂–∏–¥–∞–π—Ç–µ...')
    user_id = mod.session.query(mod.User.id).filter(
        mod.User.id_tg == callback_query.from_user.id).first()[0]
    cs_money_add(type_cs["–î—Ä–æ–±–æ–≤–∏–∫–∏"], user_id, mod.Shotguns)
    await callback_query.message.answer(f"–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä–æ–±–æ–≤–∏–∫–æ–≤ –≤ –ë–î")


@router.callback_query(F.data == "machine")
async def help_handler(callback_query: CallbackQuery):
    await callback_query.message.answer('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—É–ª–µ–º–µ—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ CS.MONEY, –æ–∂–∏–¥–∞–π—Ç–µ...')
    user_id = mod.session.query(mod.User.id).filter(
        mod.User.id_tg == callback_query.from_user.id).first()[0]
    cs_money_add(type_cs["–ü—É–ª–µ–º–µ—Ç—ã"], user_id, mod.Machine_guns)
    await callback_query.message.answer(f"–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–ª–µ–º–µ—Ç–æ–≤ –≤ –ë–î")


@router.callback_query(F.data == "keys")
async def help_handler(callback_query: CallbackQuery):
    await callback_query.message.answer('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–ª—é—á–∏ –æ—Ç –∫–µ–π—Å–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ CS.MONEY, –æ–∂–∏–¥–∞–π—Ç–µ...')
    user_id = mod.session.query(mod.User.id).filter(
        mod.User.id_tg == callback_query.from_user.id).first()[0]
    cs_money_add(type_cs["–ö–ª—é—á–∏"], user_id, mod.Keys)
    await callback_query.message.answer(f"–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ –ë–î")


@router.callback_query(F.data == "another")
async def help_handler(callback_query: CallbackQuery):
    await callback_query.message.answer('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Å—Ç–∞–ª—å–Ω–æ–µ(–¥—Ä—É–≥–æ–µ) –Ω–∞ —Ä—ã–Ω–∫–µ CS.MONEY, –æ–∂–∏–¥–∞–π—Ç–µ...')
    user_id = mod.session.query(mod.User.id).filter(
        mod.User.id_tg == callback_query.from_user.id).first()[0]
    cs_money_add(type_cs["–î—Ä—É–≥–∏–µ"], user_id, mod.Anothers)
    await callback_query.message.answer(f"–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –≤ –ë–î")


# @router.callback_query(F.data == "another")
# async def help_handler(callback_query: CallbackQuery):
#     await callback_query.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
#     steam_data(type_cs["–î—Ä—É–≥–∏–µ"])
#
#     with open('result.json') as file:
#         data = json.load(file)
#
#     for index, item in enumerate(data):
#         card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
#                f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("Discount")}%\n' \
#                f'{hbold("–¶–µ–Ω–∞ –¥–æ: ")}{item.get("BeforePrice")} —Ä—É–±.\n' \
#                f'{hbold("–¶–µ–Ω–∞ –ø–æ—Å–ª–µ: ")}{item.get("PriceNow")} —Ä—É–±. üî•'
#
#         if index % 20 == 0:
#             await asyncio.sleep(3)
#
#         await callback_query.message.answer(card)